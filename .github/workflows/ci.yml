name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # Runs on the latest Windows runner

    env:
      Solution_Name: Blazor_Lab_Starter_Code.sln        # Your solution file name
      Test_Project_Path: LibTests/UnitTest1.cs       # Path to your test project (LibTests)
      Wap_Project_Directory: .                          # Assuming your project is in the root of the repo, update if needed
      Wap_Project_Path: Blazor_Lab_Starter_Code/Program.cs  # Path to your main project

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore dependencies
    - name: Restore the application
      run: dotnet restore $env:Blazor_Lab_Starter_Code

    # Build the application
    - name: Build the application
      run: dotnet build $env:Blazor_Lab_Starter_Code --configuration ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:UnitTest1.cs --configuration ${{ matrix.configuration }} --no-build --verbosity normal

    # Decode the base 64 encoded pfx and save the Signing_Certificate (if needed)
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Upload the MSIX package as an artifact (if required)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
